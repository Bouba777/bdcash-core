{
    // Utilisez IntelliSense pour en savoir plus sur les attributs possibles.
    // Pointez pour afficher la description des attributs existants.
    // Pour plus d'informations, visitez : https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
      TODO
    static int Main(string[] args)
    {
      
      return 0;
    }
      public NameIterator Name
      {
        get
        {
          return new NameIterator(this);
        }
      }
      
      public class NameIterator
      {
        readonly ClassName outer;
        
        internal NameIterator(ClassName outer)
        {
          this.outer = outer;
        }
        
        // TODO: provide an appropriate implementation here
        public int Length { get { return 1; } }
        
        public ElementType this[int index]
        {
          get
          {
            //
            // TODO: implement indexer here
            //
            // you have full access to ClassName privates
            //
            throw new System.NotImplementedException();
            return default(ElementType);
          }
        }
        
        public System.Collections.Generic.IEnumerator<ElementType> GetEnumerator()
        {
          for (int i = 0; i < this.Length; i++)
          {
            yield return this[i];
          }
        }
      }
      static void Main(string[] args)
      {
        
      }
    #endregion
      
    [System.AttributeUsage(System.AttributeTargets.All, Inherited = false, AllowMultiple = true)]
    sealed class ${launch}Attribute : System.Attribute
    {
      // See the attribute guidelines at
      //  http://go.microsoft.com/fwlink/?LinkId=85236
      readonly string positionalString;
      
      // This is a positional argument
      public launchAttribute(string positionalString)
      {
        this.positionalString = positionalString;
        
        // TODO: Implement code here
        throw new System.NotImplementedException();
      }
      
      public string PositionalString
      {
        get { return positionalString; }
      }
      
      // This is a named argument
      public int NamedInt { get; set; }
    }
    ]
}
